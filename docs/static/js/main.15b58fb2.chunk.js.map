{"version":3,"sources":["components/AddCategory.js","helpers/getFetchGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getFetchGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","gif","prototype","PropTypes","string","isRequired","GifExpertApp","defaultCategories","ReactDOM","render","document","querySelector"],"mappings":"oMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE7B,EAAsCC,mBAAU,IAAhD,mBAAQC,EAAR,KAAoBC,EAApB,KAYA,OACC,sBAAMC,SAVc,SAACC,GACrBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC/BR,GAAe,SAAAS,GAAU,OAAMP,GAAN,mBAAqBO,OAC9CN,EAAe,MAKhB,SACC,uBACCO,KAAK,OACLC,MAAQT,EACRU,SAfuB,SAAEP,GAAF,OAASF,EAAeE,EAAEQ,OAAOF,a,+CCP/CG,EAAY,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAErBC,EAFqB,iDAEiCC,UAAWH,GAF5C,+DAGJI,MAAOF,GAHH,cAGrBG,EAHqB,gBAIJA,EAASC,OAJL,uBAInBC,EAJmB,EAInBA,KACFC,EAAWD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EACjC,MAAQ,CACPC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATT,kBAapBM,GAboB,4CAAH,sDCGZO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAEpC,OACC,sBAAKc,UAAU,yCAAf,UACC,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,mCAAOA,EAAP,WCHUO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAEzB,ECJ2B,SAAEA,GAE7B,MAA4Bd,mBAAS,CACpCqB,KAAM,GACNa,SAAS,IAFV,mBAAQC,EAAR,KAAeC,EAAf,KAiBA,OAZAC,qBAAW,WAEVxB,EAAcC,GACZwB,MAAM,SAAAhB,GACNc,EAAS,CACRf,KAAMC,EACNY,SAAS,SAIV,CAAEpB,IAEEqB,EDfwBI,CAAczB,GAAhCQ,EAAb,EAAQD,KAAWa,EAAnB,EAAmBA,QAEnB,OACC,qCACC,qBAAIJ,UAAU,oCAAd,cAAqDhB,EAArD,OAEEoB,GAAW,mBAAGJ,UAAU,mCAAb,0BAEb,qBAAKA,UAAU,YAAf,SAEER,EAAKC,KAAK,SAAAiB,GAAG,OACZ,cAAC,EAAD,eAEMA,GADCA,EAAIf,aAUjBQ,EAAQQ,UAAY,CACnB3B,SAAU4B,IAAUC,OAAOC,YE1BrB,IAAMC,EAAe,SAAC,GAAgC,IAAD,IAA7BC,yBAA6B,MAAT,GAAS,EAG3D,EAAsC9C,mBAAU8C,GAAhD,mBAAQtC,EAAR,KAAoBT,EAApB,KAEA,OAEC,qCACC,mDACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBACA,6BAEES,EAAWe,KAAK,SAAAT,GAAQ,OACvB,cAAC,EAAD,CAECA,SAAWA,GADLA,Y,MCbbiC,IAASC,OACR,cAAC,EAAD,IACAC,SAASC,cAAc,Y","file":"static/js/main.15b58fb2.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n\n\tconst [ inputValue, setInputValue ] = useState( \"\" );\n\n\tconst handleInputChange = ( e ) => setInputValue( e.target.value );\n\tconst handleSubmit = (e) => {\n\t\te.preventDefault();\n\n\t\tif ( inputValue.trim().length > 2 ) {\n\t\t\tsetCategories( categories => [ inputValue, ...categories ] );\n\t\t\tsetInputValue( \"\" );\n\t\t}\n\t};\n\n\treturn (\n\t\t<form onSubmit={ handleSubmit }>\n\t\t\t<input\n\t\t\t\ttype=\"text\"\n\t\t\t\tvalue={ inputValue }\n\t\t\t\tonChange={ handleInputChange }\n\t\t\t/>\n\t\t</form>\n\t);\n};\n\nAddCategory.propTypes = {\n\tsetCategories: PropTypes.func.isRequired,\n}\n","export const getFetchGifs = async( category ) => {\n\n\tconst url      = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=mlKQ969mBMhRH4cz0k3RRVsHGbrnWJ57`;\n\tconst response = await fetch( url );\n\tconst { data } = await response.json();\n\tconst gifs     = data.map( img => {\n\t\treturn ({\n\t\t\tid: img.id,\n\t\t\ttitle: img.title,\n\t\t\turl: img.images?.downsized_medium.url,\n\t\t});\n\t});\n\n\treturn gifs;\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const GifGridItem = ({ title, url }) => {\n\n\treturn (\n\t\t<div className=\"card animate__animated animate__fadeIn\">\n\t\t\t<img src={ url } alt={ title } />\n\t\t\t<h3> { title } </h3>\n\t\t</div>\n\t);\n}\n\nGifGridItem.propTypes = {\n\ttitle: PropTypes.string.isRequired,\n\turl: PropTypes.string.isRequired,\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n\tconst { data:gifs, loading } = useFetchGifs( category );\n\n\treturn (\n\t\t<>\n\t\t\t<h2 className=\"animate__animated animate__fadeIn\"> { category } </h2>\n\t\t\t\n\t\t\t{ loading && <p className=\"animate__animated animate__flash\"> Loading... </p> }\n\n\t\t\t<div className=\"card-grid\">\n\t\t\t\t{\n\t\t\t\t\tgifs.map( gif => (\n\t\t\t\t\t\t<GifGridItem\n\t\t\t\t\t\t\tkey={ gif.id }\n\t\t\t\t\t\t\t{ ...gif }\n\t\t\t\t\t\t/>\n\t\t\t\t\t))\n\t\t\t\t}\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nGifGrid.prototype = {\n\tcategory: PropTypes.string.isRequired,\n}\n","import { useState, useEffect } from 'react';\nimport { getFetchGifs } from '../helpers/getFetchGifs';\n\nexport const useFetchGifs = ( category ) => {\n\n\tconst [ state, setState ] = useState({\n\t\tdata: [],\n\t\tloading: true,\n\t});\n\n\tuseEffect( () => {\n\n\t\tgetFetchGifs( category )\n\t\t\t.then( gifs => {\n\t\t\t\tsetState({\n\t\t\t\t\tdata: gifs,\n\t\t\t\t\tloading: false,\n\t\t\t\t});\n\t\t\t});\n\n\t}, [ category ]);\n\n\treturn state;\n};\n","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = ({ defaultCategories = [] }) => {\n\n\t// const [ categories, setCategories ] = useState( [\"Naruto\"] );\n\tconst [ categories, setCategories ] = useState( defaultCategories );\n\n\treturn (\n\n\t\t<>\n\t\t\t<h2> GifExpertApp XD </h2>\n\t\t\t<AddCategory setCategories={ setCategories } />\n\t\t\t<hr />\n\t\t\t<ol>\n\t\t\t\t{\n\t\t\t\t\tcategories.map( category =>\n\t\t\t\t\t\t<GifGrid\n\t\t\t\t\t\t\tkey={ category }\n\t\t\t\t\t\t\tcategory={ category }\n\t\t\t\t\t\t/>\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t</ol>\n\t\t</>\n\t);\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n\t<GifExpertApp />,\n\tdocument.querySelector('#root')\n);\n"],"sourceRoot":""}